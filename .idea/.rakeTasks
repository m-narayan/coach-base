<?xml version="1.0" encoding="UTF-8"?>
<Settings><!--This file was automatically generated by Ruby plugin.
You are allowed to: 
1. Remove rake task
2. Add existing rake tasks
To add existing rake tasks automatically delete this file and reload the project.
--><RakeGroup description="" fullCmd="" taksId="rake"><RakeTask description="List versions of all Rails frameworks and the environment" fullCmd="about" taksId="about" /><RakeGroup description="" fullCmd="" taksId="assets"><RakeTask description="Remove compiled assets" fullCmd="assets:clean" taksId="clean" /><RakeTask description="Compile all the assets named in config.assets.precompile" fullCmd="assets:precompile" taksId="precompile" /><RakeGroup description="" fullCmd="" taksId="clean"><RakeTask description="" fullCmd="assets:clean:all" taksId="all" /></RakeGroup><RakeTask description="" fullCmd="assets:environment" taksId="environment" /><RakeGroup description="" fullCmd="" taksId="precompile"><RakeTask description="" fullCmd="assets:precompile:all" taksId="all" /><RakeTask description="" fullCmd="assets:precompile:nondigest" taksId="nondigest" /><RakeTask description="" fullCmd="assets:precompile:primary" taksId="primary" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="bigbluebutton_rails"><RakeGroup description="" fullCmd="" taksId="recordings"><RakeTask description="Fetch recordings in all servers" fullCmd="bigbluebutton_rails:recordings:update" taksId="update" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="db"><RakeTask description="Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)" fullCmd="db:create" taksId="create" /><RakeTask description="Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)" fullCmd="db:drop" taksId="drop" /><RakeGroup description="" fullCmd="" taksId="fixtures"><RakeTask description="Load fixtures into the current environment's database" fullCmd="db:fixtures:load" taksId="load" /><RakeTask description="" fullCmd="db:fixtures:identify" taksId="identify" /></RakeGroup><RakeTask description="Migrate the database (options: VERSION=x, VERBOSE=false)" fullCmd="db:migrate" taksId="migrate" /><RakeGroup description="" fullCmd="" taksId="migrate"><RakeTask description="Display status of migrations" fullCmd="db:migrate:status" taksId="status" /><RakeTask description="" fullCmd="db:migrate:down" taksId="down" /><RakeTask description="" fullCmd="db:migrate:redo" taksId="redo" /><RakeTask description="" fullCmd="db:migrate:reset" taksId="reset" /><RakeTask description="" fullCmd="db:migrate:up" taksId="up" /></RakeGroup><RakeTask description="Populate database with fake data for development" fullCmd="db:populate" taksId="populate" /><RakeGroup description="" fullCmd="" taksId="populate"><RakeTask description="Reload populate data for Cheesecake testing" fullCmd="db:populate:cheesecake" taksId="cheesecake" /><RakeTask description="Create populate data / Create populate data with documents / Create populate data with events / Create populate data with links / Create populate data with client sites" fullCmd="db:populate:create" taksId="create" /><RakeGroup description="" fullCmd="" taksId="create"><RakeTask description="Create avatars" fullCmd="db:populate:create:avatars" taksId="avatars" /><RakeTask description="Add documents to populate data" fullCmd="db:populate:create:documents" taksId="documents" /><RakeTask description="Add events to populate data" fullCmd="db:populate:create:events" taksId="events" /><RakeTask description="Create groups" fullCmd="db:populate:create:groups" taksId="groups" /><RakeTask description="Add links to populate data" fullCmd="db:populate:create:links" taksId="links" /><RakeTask description="Create messages using mailboxer" fullCmd="db:populate:create:messages" taksId="messages" /><RakeTask description="Create posts" fullCmd="db:populate:create:posts" taksId="posts" /><RakeTask description="Populate profiles" fullCmd="db:populate:create:profiles" taksId="profiles" /><RakeTask description="Add client sites populate data" fullCmd="db:populate:create:site_clients" taksId="site_clients" /><RakeTask description="Create ties" fullCmd="db:populate:create:ties" taksId="ties" /><RakeTask description="Create users" fullCmd="db:populate:create:users" taksId="users" /></RakeGroup><RakeTask description="INTERNAL: read needed environment data and setup variables" fullCmd="db:populate:read_environment" taksId="read_environment" /><RakeTask description="Reload populate data" fullCmd="db:populate:reload" taksId="reload" /></RakeGroup><RakeTask description="Rolls the schema back to the previous version (specify steps w/ STEP=n)" fullCmd="db:rollback" taksId="rollback" /><RakeGroup description="" fullCmd="" taksId="schema"><RakeTask description="Create a db/schema.rb file that can be portably used against any DB supported by AR" fullCmd="db:schema:dump" taksId="dump" /><RakeTask description="Load a schema.rb file into the database" fullCmd="db:schema:load" taksId="load" /><RakeTask description="" fullCmd="db:schema:load_if_ruby" taksId="load_if_ruby" /></RakeGroup><RakeTask description="Load the seed data from db/seeds.rb" fullCmd="db:seed" taksId="seed" /><RakeTask description="Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)" fullCmd="db:setup" taksId="setup" /><RakeGroup description="" fullCmd="" taksId="structure"><RakeTask description="Dump the database structure to db/structure.sql" fullCmd="db:structure:dump" taksId="dump" /><RakeTask description="" fullCmd="db:structure:load" taksId="load" /><RakeTask description="" fullCmd="db:structure:load_if_sql" taksId="load_if_sql" /></RakeGroup><RakeTask description="Retrieves the current schema version number" fullCmd="db:version" taksId="version" /><RakeTask description="" fullCmd="db:_dump" taksId="_dump" /><RakeTask description="" fullCmd="db:abort_if_pending_migrations" taksId="abort_if_pending_migrations" /><RakeTask description="" fullCmd="db:charset" taksId="charset" /><RakeTask description="" fullCmd="db:collation" taksId="collation" /><RakeGroup description="" fullCmd="" taksId="create"><RakeTask description="" fullCmd="db:create:all" taksId="all" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="drop"><RakeTask description="" fullCmd="db:drop:all" taksId="all" /></RakeGroup><RakeTask description="" fullCmd="db:forward" taksId="forward" /><RakeTask description="" fullCmd="db:load_config" taksId="load_config" /><RakeTask description="" fullCmd="db:reset" taksId="reset" /><RakeGroup description="" fullCmd="" taksId="sessions"><RakeTask description="" fullCmd="db:sessions:clear" taksId="clear" /><RakeTask description="" fullCmd="db:sessions:create" taksId="create" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="test"><RakeTask description="" fullCmd="db:test:clone" taksId="clone" /><RakeTask description="" fullCmd="db:test:clone_structure" taksId="clone_structure" /><RakeTask description="" fullCmd="db:test:load" taksId="load" /><RakeTask description="" fullCmd="db:test:load_schema" taksId="load_schema" /><RakeTask description="" fullCmd="db:test:load_structure" taksId="load_structure" /><RakeTask description="" fullCmd="db:test:prepare" taksId="prepare" /><RakeTask description="" fullCmd="db:test:purge" taksId="purge" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="deface"><RakeTask description="Removes all precompiled override templates" fullCmd="deface:clean" taksId="clean" /><RakeTask description="Get the resulting markup for a partial/template" fullCmd="deface:get_result[virtual_path]" taksId="get_result[virtual_path]" /><RakeTask description="Precompiles overrides into template files" fullCmd="deface:precompile" taksId="precompile" /><RakeTask description="Applies selectors to given partial/template, and returns match(s) source" fullCmd="deface:test_selector[virtual_path,selector]" taksId="test_selector[virtual_path,selector]" /><RakeTask description="" fullCmd="deface:get_result" taksId="get_result" /><RakeTask description="" fullCmd="deface:test_selector" taksId="test_selector" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="doc"><RakeTask description="Generate docs for the app -- also available doc:rails, doc:guides, doc:plugins (options: TEMPLATE=/rdoc-template.rb, TITLE=&quot;Custom Title&quot;)" fullCmd="doc:app" taksId="app" /><RakeTask description="" fullCmd="doc:clobber" taksId="clobber" /><RakeTask description="" fullCmd="doc:clobber_app" taksId="clobber_app" /><RakeTask description="" fullCmd="doc:clobber_plugins" taksId="clobber_plugins" /><RakeTask description="" fullCmd="doc:clobber_rails" taksId="clobber_rails" /><RakeTask description="" fullCmd="doc:guides" taksId="guides" /><RakeTask description="" fullCmd="doc:plugins" taksId="plugins" /><RakeTask description="" fullCmd="doc:rails" taksId="rails" /><RakeTask description="" fullCmd="doc:reapp" taksId="reapp" /><RakeTask description="" fullCmd="doc:rerails" taksId="rerails" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="i18n"><RakeTask description="Write missing keys of i18n files" fullCmd="i18n:diff" taksId="diff" /><RakeGroup description="" fullCmd="" taksId="js"><RakeTask description="Export the messages files" fullCmd="i18n:js:export" taksId="export" /><RakeTask description="Copy i18n.js and configuration file" fullCmd="i18n:js:setup" taksId="setup" /><RakeTask description="Update the JavaScript library" fullCmd="i18n:js:update" taksId="update" /></RakeGroup><RakeTask description="Synchronize i18n files" fullCmd="i18n:sync" taksId="sync" /><RakeTask description="" fullCmd="i18n:common" taksId="common" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="log"><RakeTask description="Truncates all *.log files in log/ to zero bytes" fullCmd="log:clear" taksId="clear" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="mailboxer_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from mailboxer_engine to application" fullCmd="mailboxer_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeTask description="Prints out your Rack middleware stack" fullCmd="middleware" taksId="middleware" /><RakeTask description="Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" fullCmd="notes" taksId="notes" /><RakeGroup description="" fullCmd="" taksId="notes"><RakeTask description="Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" fullCmd="notes:custom" taksId="custom" /><RakeTask description="" fullCmd="notes:fixme" taksId="fixme" /><RakeTask description="" fullCmd="notes:optimize" taksId="optimize" /><RakeTask description="" fullCmd="notes:todo" taksId="todo" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="paperclip"><RakeTask description="Cleans out invalid attachments" fullCmd="paperclip:clean" taksId="clean" /><RakeTask description="Refreshes both metadata and thumbnails" fullCmd="paperclip:refresh" taksId="refresh" /><RakeGroup description="" fullCmd="" taksId="refresh"><RakeTask description="Regenerates content_type/size metadata for a given CLASS (and optional ATTACHMENT)" fullCmd="paperclip:refresh:metadata" taksId="metadata" /><RakeTask description="Regenerates missing thumbnail styles for all classes using Paperclip" fullCmd="paperclip:refresh:missing_styles" taksId="missing_styles" /><RakeTask description="Regenerates thumbnails for a given CLASS (and optional ATTACHMENT and STYLES splitted by comma)" fullCmd="paperclip:refresh:thumbnails" taksId="thumbnails" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="presence"><RakeTask description="Copy ejabberd files to the xmpp server and write configuration files" fullCmd="presence:install" taksId="install" /><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Autoconfigure options" fullCmd="presence:install:autoconfigure_xmpp_server[options]" taksId="autoconfigure_xmpp_server[options]" /><RakeTask description="Copy ejabberd files to the xmpp server" fullCmd="presence:install:copy_xmpp_server_files" taksId="copy_xmpp_server_files" /><RakeTask description="Generate and distribute RSA Keys" fullCmd="presence:install:generate_RSA_keys" taksId="generate_RSA_keys" /><RakeTask description="Copy ejabberd files to the xmpp server and write configuration files" fullCmd="presence:install:xmpp_server[sudo_password]" taksId="xmpp_server[sudo_password]" /><RakeTask description="" fullCmd="presence:install:autoconfigure_xmpp_server" taksId="autoconfigure_xmpp_server" /><RakeTask description="" fullCmd="presence:install:xmpp_server" taksId="xmpp_server" /></RakeGroup><RakeTask description="Add web domains to Xmpp Server" fullCmd="presence:multidomain" taksId="multidomain" /><RakeGroup description="" fullCmd="" taksId="multidomain"><RakeTask description="Add new web domain to XMPP Server" fullCmd="presence:multidomain:add[domain,url]" taksId="add[domain,url]" /><RakeTask description="Remove web domain from the XMPP Server" fullCmd="presence:multidomain:remove[domain]" taksId="remove[domain]" /><RakeTask description="Update web domain of XMPP Server" fullCmd="presence:multidomain:update[domain,url]" taksId="update[domain,url]" /><RakeTask description="" fullCmd="presence:multidomain:add" taksId="add" /><RakeTask description="" fullCmd="presence:multidomain:remove" taksId="remove" /><RakeTask description="" fullCmd="presence:multidomain:update" taksId="update" /></RakeGroup><RakeTask description="Synchronize Xmpp Server with Social Stream Rails Application" fullCmd="presence:synchronize" taksId="synchronize" /><RakeGroup description="" fullCmd="" taksId="synchronize"><RakeTask description="Synchronize user presence" fullCmd="presence:synchronize:connections[domain]" taksId="connections[domain]" /><RakeTask description="Remove all rooms and create one room (also knowledge as MUC) for each Social Stream group" fullCmd="presence:synchronize:rooms[domain]" taksId="rooms[domain]" /><RakeTask description="Remove all rosters and populate rosters from Social Stream data" fullCmd="presence:synchronize:rosters[domain]" taksId="rosters[domain]" /><RakeTask description="" fullCmd="presence:synchronize:connections" taksId="connections" /><RakeTask description="" fullCmd="presence:synchronize:rooms" taksId="rooms" /><RakeTask description="" fullCmd="presence:synchronize:rosters" taksId="rosters" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="rails"><RakeTask description="Applies the template supplied by LOCATION=(/path/to/template) or URL" fullCmd="rails:template" taksId="template" /><RakeTask description="Update configs and some other initially generated files (or use just update:configs, update:scripts, or update:application_controller)" fullCmd="rails:update" taksId="update" /><RakeGroup description="" fullCmd="" taksId="templates"><RakeTask description="" fullCmd="rails:templates:copy" taksId="copy" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="update"><RakeTask description="" fullCmd="rails:update:application_controller" taksId="application_controller" /><RakeTask description="" fullCmd="rails:update:configs" taksId="configs" /><RakeTask description="" fullCmd="rails:update:scripts" taksId="scripts" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="resque"><RakeGroup description="" fullCmd="" taksId="failures"><RakeTask description="Sort the 'failed' queue for the redis_multi_queue failure backend" fullCmd="resque:failures:sort" taksId="sort" /></RakeGroup><RakeTask description="Start a Resque worker" fullCmd="resque:work" taksId="work" /><RakeTask description="Start multiple Resque workers" fullCmd="resque:workers" taksId="workers" /><RakeTask description="" fullCmd="resque:preload" taksId="preload" /><RakeTask description="" fullCmd="resque:setup" taksId="setup" /></RakeGroup><RakeTask description="Print out all defined routes in match order, with names" fullCmd="routes" taksId="routes" /><RakeGroup description="" fullCmd="" taksId="scheduler_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from scheduler_engine to application" fullCmd="scheduler_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeTask description="Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" fullCmd="secret" taksId="secret" /><RakeGroup description="" fullCmd="" taksId="social_stream"><RakeGroup description="" fullCmd="" taksId="attachments"><RakeTask description="Fix avatar's attachment path from Social Stream &lt; 2.0" fullCmd="social_stream:attachments:fix" taksId="fix" /><RakeTask description="Set record timestamps to false" fullCmd="social_stream:attachments:freeze_timestamps" taksId="freeze_timestamps" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="migrations"><RakeTask description="Copy pending migrations from all the social_stream components" fullCmd="social_stream:migrations:update" taksId="update" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="social_stream_base_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from social_stream_base_engine to application" fullCmd="social_stream_base_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="social_stream_documents_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from social_stream_documents_engine to application" fullCmd="social_stream_documents_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="social_stream_events_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from social_stream_events_engine to application" fullCmd="social_stream_events_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="social_stream_linkser_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from social_stream_linkser_engine to application" fullCmd="social_stream_linkser_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="social_stream_oauth2_server_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from social_stream_oauth2_server_engine to application" fullCmd="social_stream_oauth2_server_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="social_stream_ostatus_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from social_stream_ostatus_engine to application" fullCmd="social_stream_ostatus_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="social_stream_presence_engine"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="Copy migrations from social_stream_presence_engine to application" fullCmd="social_stream_presence_engine:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup><RakeTask description="Report code statistics (KLOCs, etc) from the application" fullCmd="stats" taksId="stats" /><RakeTask description="Runs test:units, test:functionals, test:integration together (also available: test:benchmark, test:profile, test:plugins)" fullCmd="test" taksId="test" /><RakeGroup description="" fullCmd="" taksId="test"><RakeTask description="Run tests for {:recent=&gt;&quot;test:prepare&quot;} / Test recent changes" fullCmd="test:recent" taksId="recent" /><RakeTask description="Run tests for {:single=&gt;&quot;test:prepare&quot;}" fullCmd="test:single" taksId="single" /><RakeTask description="Run tests for {:uncommitted=&gt;&quot;test:prepare&quot;} / Test changes since last checkin (only Subversion and Git)" fullCmd="test:uncommitted" taksId="uncommitted" /><RakeTask description="" fullCmd="test:benchmark" taksId="benchmark" /><RakeTask description="" fullCmd="test:functionals" taksId="functionals" /><RakeTask description="" fullCmd="test:integration" taksId="integration" /><RakeTask description="" fullCmd="test:plugins" taksId="plugins" /><RakeTask description="" fullCmd="test:prepare" taksId="prepare" /><RakeTask description="" fullCmd="test:profile" taksId="profile" /><RakeTask description="" fullCmd="test:run" taksId="run" /><RakeGroup description="" fullCmd="" taksId="test"><RakeTask description="" fullCmd="test:test:benchmark_mode" taksId="benchmark_mode" /></RakeGroup><RakeTask description="" fullCmd="test:units" taksId="units" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="thinking_sphinx"><RakeTask description="Generate the Sphinx configuration file using Thinking Sphinx's settings" fullCmd="thinking_sphinx:configure" taksId="configure" /><RakeTask description="Index data for Sphinx using Thinking Sphinx's settings" fullCmd="thinking_sphinx:index" taksId="index" /><RakeTask description="Stop Sphinx (if it's running), rebuild the indexes, and start Sphinx" fullCmd="thinking_sphinx:rebuild" taksId="rebuild" /><RakeTask description="Reindex Sphinx without regenerating the configuration file" fullCmd="thinking_sphinx:reindex" taksId="reindex" /><RakeTask description="Restart Sphinx" fullCmd="thinking_sphinx:restart" taksId="restart" /><RakeTask description="Stop if running, then start a Sphinx searchd daemon using Thinking Sphinx's settings" fullCmd="thinking_sphinx:running_start" taksId="running_start" /><RakeTask description="Start a Sphinx searchd daemon using Thinking Sphinx's settings" fullCmd="thinking_sphinx:start" taksId="start" /><RakeTask description="Stop Sphinx using Thinking Sphinx's settings" fullCmd="thinking_sphinx:stop" taksId="stop" /><RakeTask description="Output the current Thinking Sphinx version" fullCmd="thinking_sphinx:version" taksId="version" /><RakeTask description="" fullCmd="thinking_sphinx:app_env" taksId="app_env" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="time"><RakeGroup description="" fullCmd="" taksId="zones"><RakeTask description="Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" fullCmd="time:zones:all" taksId="all" /><RakeTask description="" fullCmd="time:zones:local" taksId="local" /><RakeTask description="" fullCmd="time:zones:us" taksId="us" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="tmp"><RakeTask description="Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" fullCmd="tmp:clear" taksId="clear" /><RakeTask description="Creates tmp directories for sessions, cache, sockets, and pids" fullCmd="tmp:create" taksId="create" /><RakeGroup description="" fullCmd="" taksId="cache"><RakeTask description="" fullCmd="tmp:cache:clear" taksId="clear" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="pids"><RakeTask description="" fullCmd="tmp:pids:clear" taksId="clear" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="sessions"><RakeTask description="" fullCmd="tmp:sessions:clear" taksId="clear" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="sockets"><RakeTask description="" fullCmd="tmp:sockets:clear" taksId="clear" /></RakeGroup></RakeGroup><RakeGroup description="" fullCmd="" taksId="ts"><RakeTask description="Generate the Sphinx configuration file using Thinking Sphinx's settings" fullCmd="ts:conf" taksId="conf" /><RakeTask description="Generate the Sphinx configuration file using Thinking Sphinx's settings" fullCmd="ts:config" taksId="config" /><RakeTask description="Index data for Sphinx using Thinking Sphinx's settings" fullCmd="ts:in" taksId="in" /><RakeTask description="Stop Sphinx (if it's running), rebuild the indexes, and start Sphinx" fullCmd="ts:rebuild" taksId="rebuild" /><RakeTask description="Reindex Sphinx without regenerating the configuration file" fullCmd="ts:reindex" taksId="reindex" /><RakeTask description="Restart Sphinx" fullCmd="ts:restart" taksId="restart" /><RakeTask description="Stop if running, then start a Sphinx searchd daemon using Thinking Sphinx's settings" fullCmd="ts:run" taksId="run" /><RakeTask description="Start a Sphinx searchd daemon using Thinking Sphinx's settings" fullCmd="ts:start" taksId="start" /><RakeTask description="Stop Sphinx using Thinking Sphinx's settings" fullCmd="ts:stop" taksId="stop" /><RakeTask description="Output the current Thinking Sphinx version" fullCmd="ts:version" taksId="version" /><RakeTask description="" fullCmd="ts:index" taksId="index" /></RakeGroup><RakeGroup description="" fullCmd="" taksId="workers"><RakeTask description="Kill ALL workers on this machine" fullCmd="workers:kilall" taksId="kilall" /><RakeTask description="Run and manage group of Resque workers with some default options" fullCmd="workers:start" taksId="start" /></RakeGroup><RakeTask description="" fullCmd="default" taksId="default" /><RakeTask description="" fullCmd="doc" taksId="doc" /><RakeTask description="" fullCmd="doc/api" taksId="doc/api" /><RakeTask description="" fullCmd="doc/api/index.html" taksId="doc/api/index.html" /><RakeTask description="" fullCmd="doc/app" taksId="doc/app" /><RakeTask description="" fullCmd="doc/app/index.html" taksId="doc/app/index.html" /><RakeTask description="" fullCmd="environment" taksId="environment" /><RakeTask description="" fullCmd="rails_env" taksId="rails_env" /><RakeGroup description="" fullCmd="" taksId="railties"><RakeGroup description="" fullCmd="" taksId="install"><RakeTask description="" fullCmd="railties:install:migrations" taksId="migrations" /></RakeGroup></RakeGroup></RakeGroup></Settings>
